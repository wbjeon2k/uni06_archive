1) The meaning of adjacency in undirected graph is that 'two vertices u and v are said to be adjacent if there is an edge whose end vertices are u and v.' Does it have the same meaning in digraph, regardless of the edge's direction?

Answer: Yes, given a directed edge <u,v>, the two vertices u and v are said to be adjacent.


2) What is the meaning of 'incident' in digraphs? The meaning of 'incident' in undirected graph is that 'an edge is said to be incident on a vertex if the vertex is one of the edge's endpoints.' Does it mean that if the vertex is one of the edge's endpoints regardless of whether the vertex is origin or destination, it is incident on the directed edge?

Answer:
Consider two directed edges <u,v> and <v,w>. Yes. v is incident on both <u,v> and <v,w>.  In the literature, some people also say "<u,v> is incident from u", "v is incident from <u,v>", "<u,v> is incident to v", and "u is incident to <u,v>". Anyhow, they are all incident in some ways.


3) Can I use the set and pair template in STL?

Answer: Yes, you can.  But I don't think you really need to use set.


4) Can I use find() defined in the algorithm header file in STL?

Answer: Yes, you can.


5) Should FlightMap::printAllShortestRoutes() print the shortest routes in the same order of the sample problem?

Answer: No, the order can be different, but the set of shortest routes should be the same. Moreover, the print format of each shortest route in each line of the output should be the same.

6) If two airports are not reachable to each other, should FlightMap::calcRouteDistance() throw an exception?

Answer: Yes, you should. To make it more clear, we have just added "Throw an exception if some edges on the route do not exist." to the comment of FlightMap::calcRouteDistance().

7) If we run the sample program with graph1.txt, choose option j, and enter this:

  Please enter the airport at the origin: BOS
  Please enter the airport at the destination: BOS

The output is 

  BOS can be connected to BOS:
    BOS  (Distance = 0)

Likewise, if we choose option l and enter this:

Please enter the airport at the origin: BOS
Please enter the airport at the destination: BOS

The output is

  One of the shortest routes connecting BOS to BOS is:
    BOS  (Distance = 0)

Shouldn't the program throw an exception in these cases instead?

Answer: Yes, you are correct, as we assumed that there is no direct edge (i.e., connection)
pointing from and to the same vertex (i.e., airport). In other words, there should be no
self-loop in the graph. Our sample program didn't check this flight-map-sample, which
is a bug.

We decided to avoid making test cases to test the above cases in our grading.
Hence, it is up to the students to decide how to deal with such cases.


